/* soapClient.cpp
   Generated by gSOAP 2.8.10 from adp_gsoap.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.8.10 2012-09-07 11:28:08 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_adp_List__tauschen(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _param_1, std::string _param_2, std::string _param_3, int *_param_4)
{	struct adp_List__tauschen soap_tmp_adp_List__tauschen;
	struct adp_List__tauschenResponse *soap_tmp_adp_List__tauschenResponse;
	soap->encodingStyle = NULL;
	soap_tmp_adp_List__tauschen._param_1 = _param_1;
	soap_tmp_adp_List__tauschen._param_2 = _param_2;
	soap_tmp_adp_List__tauschen._param_3 = _param_3;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_adp_List__tauschen(soap, &soap_tmp_adp_List__tauschen);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_adp_List__tauschen(soap, &soap_tmp_adp_List__tauschen, "adp-List:tauschen", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_adp_List__tauschen(soap, &soap_tmp_adp_List__tauschen, "adp-List:tauschen", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!_param_4)
		return soap_closesock(soap);
	soap_default_int(soap, _param_4);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_adp_List__tauschenResponse = soap_get_adp_List__tauschenResponse(soap, NULL, "adp-List:tauschenResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (_param_4 && soap_tmp_adp_List__tauschenResponse->_param_4)
		*_param_4 = *soap_tmp_adp_List__tauschenResponse->_param_4;
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapClient.cpp */
